name: Build

on:
  push:
    branches:
      - main
    paths:
      - 'springboot-chart/**'
      - 'src/**'
      - '**/*.kts'
      - 'gradle.lockfile'
      - Dockerfile
      - '.github/workflows/ci-pipeline.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout src
      uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493

    - name: Set up JDK 
      uses: actions/setup-java@v5
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle/wrapper/gradle-wrapper.properties') }}

    - name: Build with Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew build -x test

    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@v4

    - name: Build Helm Chart
      run: | 
        helm package ./springboot-chart

    - name: Publish to Latest Release
      run: |
        if gh release view latest; then
          echo "Release exists. Deleting old release..."
          gh release delete latest --yes
        fi

        gh release create latest springboot-chart-0.0.1.tgz \
          --title "Latest Release" \
          --notes "This is the latest helm chart" \
          --prerelease
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to GHCR
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

    - name: Build Docker image
      run: docker build -t ghcr.io/jacksonkuo/springboot:latest .

    - name: Push Docker image to GHCR
      run: docker push ghcr.io/jacksonkuo/springboot:latest

    - name: Delete untagged images
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        for id in $(gh api --paginate "/user/packages/container/springboot/versions" --jq '.[] | select(.metadata.container.tags == []) | .id'); do
          gh api --method DELETE "/user/packages/container/springboot/versions/$id"
        done

    - name: SSH
      run: |
        echo 'Setup SSH...'
        install -m 600 -D /dev/null ~/.ssh/id_ed25519
        echo "$DROPLET_SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519

        ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "
          # echo 'Install JDK...'
          # apt -qq update && apt-get -qq install -y openjdk-17-jdk-headless
          # echo 'Downloading the latest JAR...'

          echo 'Install Helm 3...'
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

          echo 'Check for K3s...'
          if k3s --version &> /dev/null; then
            echo "K3s is already installed."
          else
            echo 'Install K3s...'
            curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC='--disable metrics-server --disable traefik' sh -
          fi

          echo 'Download Helm chart...'
          curl -LO https://github.com/JacksonKuo/app-springboot/releases/download/latest/springboot-chart-0.0.1.tgz
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

          echo 'Inject secrets...'
          kubectl delete secret hcaptcha-secret --ignore-not-found
          kubectl create secret generic hcaptcha-secret --from-literal=HCAPTCHA_SECRET='$HCAPTCHA_SECRET'
          kubectl delete secret verify-service-sid --ignore-not-found
          kubectl create secret generic verify-service-sid --from-literal=VERIFY_SERVICE_SID='$VERIFY_SERVICE_SID'
          kubectl delete secret twilio-account-sid --ignore-not-found
          kubectl create secret generic twilio-account-sid --from-literal=TWILIO_ACCOUNT_SID='$TWILIO_ACCOUNT_SID'
          kubectl delete secret twilio-auth-token --ignore-not-found
          kubectl create secret generic twilio-auth-token --from-literal=TWILIO_AUTH_TOKEN='$TWILIO_AUTH_TOKEN'

          echo 'Check certbot...'
          if test -d /etc/letsencrypt/live/bakacore.com; then
            echo 'Certbot already run...'
          else
            echo 'Running certbot...'
            apt-get -y install certbot
            certbot certonly --standalone -d bakacore.com --agree-tos --register-unsafely-without-email
            sudo openssl pkcs12 -export \
              -in /etc/letsencrypt/live/bakacore.com/fullchain.pem \
              -inkey /etc/letsencrypt/live/bakacore.com/privkey.pem \
              -out /etc/letsencrypt/live/bakacore.com/keystore.p12 \
              -name springboot \
              -password pass:foobar
          fi

          echo 'Deploy Spring Boot service...'
          helm upgrade --install springboot springboot-chart-0.0.1.tgz
          kubectl rollout restart deployment springboot-app
          "       
      env:
        DROPLET_IP: ${{ secrets.DROPLET_IP }}
        DROPLET_SSH_PRIVATE_KEY: ${{ secrets.DROPLET_SSH_PRIVATE_KEY }}
        HCAPTCHA_SECRET: ${{ secrets.HCAPTCHA_SECRET }}
        VERIFY_SERVICE_SID: ${{ secrets.VERIFY_SERVICE_SID }}
        TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
        TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}


    

